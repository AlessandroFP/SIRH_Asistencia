/*
 * Generated by XDoclet - Do not edit!
 */
package pe.gob.sunat.sp.asistencia.ejb;

/**
 * Remote interface for MantenimientoFacadeEJB.
 * @xdoclet-generado el 05-03-2020
 */
public interface MantenimientoFacadeRemote
   extends javax.ejb.EJBObject
{

   public java.util.ArrayList cargarRelojes( java.lang.String dbpool,java.lang.String estado )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarRelojes( java.lang.String dbpool,java.lang.String criterio,java.lang.String valor )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void eliminarRelojes( java.lang.String[] params,java.util.ArrayList listaRelojes )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void eliminarAprobadores( java.lang.String[] params,java.util.ArrayList lista )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void registrarReloj( java.lang.String reloj,java.lang.String descripcion,java.lang.String sede,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarPeriodos( java.lang.String dbpool,java.lang.String criterio,java.lang.String valor )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo encargado de realizar la eliminacion de periodos
    * @param params
    * @param listaPeriodos
    * @return 
    * @throws RemoteException    */
   public void eliminarPeriodos( java.lang.String[] params,java.util.ArrayList listaPeriodos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarPeriodos( java.lang.String dbpool )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void registrarPeriodo( java.util.Map params )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarTurnos( java.lang.String dbpool,java.lang.String criterio,java.lang.String valor )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void eliminarTurnos( java.lang.String[] params,java.util.ArrayList listaTurnos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarTurnos( java.lang.String dbpool )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void registrarTurno( java.lang.String codTurno,java.lang.String descripcion,java.lang.String fechaIni,java.lang.String horaIni,java.lang.String fechaFin,java.lang.String horaFin,java.lang.String dias,java.lang.String tolerancia,java.lang.String horaLimite,java.lang.String operId,java.lang.String refrIni,java.lang.String refrFin,java.lang.String refrMin,java.lang.String usuario,java.lang.String control )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarMovimientos( java.lang.String dbpool,java.lang.String criterio,java.lang.String valor,java.lang.String tipo )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void eliminarMovimientos( java.lang.String[] params,java.util.ArrayList listaMovimientos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarMovimientos( java.lang.String dbpool,java.lang.String tipo )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void registrarMovimiento( java.lang.String codMovimiento,java.lang.String descripcion,java.lang.String califica,java.lang.String medida,java.lang.String tipo,java.sql.Timestamp fechaIni,java.sql.Timestamp fechaFin,java.lang.String soliId,java.lang.String vbRrHh,java.lang.String procId,java.lang.String entrId,java.lang.String refrId,java.lang.String saliId,java.lang.String diasAntes,java.lang.String diasDespues,java.lang.String diasAcum,java.lang.String obligId,java.lang.String qvalida,java.lang.String ind_dias,java.lang.String ind_proc,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarT99( java.lang.String dbpool,java.lang.String codTab )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarT99( java.lang.String dbpool,java.lang.String codTab,java.lang.String modulo )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void desactivarDetallePeriodo( java.util.ArrayList lista,java.lang.String[] checks,java.lang.String periodo,int inicio,int fin )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void desactivarDetalle( java.lang.String periodo,java.lang.String uOrg,java.lang.String uEstado,java.lang.String check )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void modificarMovimiento( java.util.Map params,java.sql.Timestamp fechaIni,java.sql.Timestamp fechaFin )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void modificarPeriodo( java.util.Map params )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void modificarReloj( java.lang.String reloj,java.lang.String descripcion,java.lang.String sede )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void modificarTurno( java.lang.String codTurno,java.lang.String descripcion,java.lang.String fechaIni,java.lang.String horaIni,java.lang.String fechaFin,java.lang.String horaFin,java.lang.String dias,java.lang.String tolerancia,java.lang.String horaLimite,java.lang.String refrIni,java.lang.String refrFin,java.lang.String refrMin,java.lang.String control )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarTipoMovimientos( java.lang.String dbpool,java.lang.String tipo,java.lang.String estado,java.lang.String fIni,java.lang.String fFin )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarPeriodosEstado( java.lang.String dbpool,java.lang.String estado )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public pe.gob.sunat.sp.asistencia.bean.BeanPeriodo buscarPeriodoCodigo( java.lang.String dbpool,java.lang.String periodo )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public pe.gob.sunat.sp.asistencia.bean.BeanPeriodo buscarPeriodoByCodigoByEstado( java.lang.String dbpool,java.lang.String periodo,java.lang.String estado )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarSedes( java.lang.String dbpool,java.lang.String estado )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarMovimientosSolicitud( java.lang.String dbpool,java.lang.String estado )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public boolean periodoCerradoAFecha( java.lang.String dbpool,java.lang.String periodo,java.lang.String fecha )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.HashMap findMaximoVentaVacaciones( java.lang.String dbpool )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.HashMap findDiasVacacionesVendidas( java.lang.String dbpool,java.lang.String codPers,java.lang.String anno )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.List cargarAnnosVac( java.lang.String dbpool,java.lang.String codPers )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarDiasVac( java.lang.String dbpool )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public boolean periodoCerradoAFechaPorRegimen( java.lang.String dbpool,java.lang.String periodo,java.lang.String fecha,java.lang.String regimenModalidad )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo encargado de verificar si un periodo CAS esta cerrado
    * @param mapa
    * @return 
    * @throws RemoteException    */
   public boolean periodoCerradoCAS( java.util.Map mProceso )
      throws java.rmi.RemoteException;

   /**
    * Metodo encargado de verificar si un periodo de Modalidad Formativa esta cerrado
    * @param mapa
    * @return 
    * @throws RemoteException    */
   public boolean periodoCerradoModFormativa( java.util.Map mProceso )
      throws java.rmi.RemoteException;

   /**
    * Metodo encargado de verificar si un periodo DL 276-728 esta cerrado
    * @param mapa
    * @return 
    * @throws RemoteException    */
   public boolean periodoCerrado( java.util.Map mProceso )
      throws java.rmi.RemoteException;

   public java.lang.String periodoCerradoAFecha( java.lang.String dbpool,java.lang.String fecha )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.lang.String periodoCerradoAFechaPorRegimen( java.lang.String dbpool,java.lang.String fecha,java.lang.String regimenModalidad )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public boolean periodoCerradoUOFecha( java.lang.String dbpool,java.lang.String fechaPer,java.lang.String fechaEval,java.lang.String uo )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo encargado de determinar si un periodo esta cerrado para un colaborador de acuerdo su regimen/modalidad
    * @param dbpool String
    * @param fechaPer String
    * @param fechaEval String
    * @param uo String
    * @param regimenModalidad
    * @return cerrado boolean
    */
   public boolean periodoCerradoUOFecha_RegimenModalidad( java.lang.String dbpool,java.lang.String fechaPer,java.lang.String fechaEval,java.lang.String uo,java.lang.String regimenModalidad )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarSaldosVacacionales( java.lang.String dbpool,java.lang.String registro )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo encargado de validar y actualizar el saldo
    * @param params Map, String
    * @return boolean
    * @throws FacadeException
    */
   public boolean validaSaldo( java.util.Map saldo )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   public java.util.ArrayList buscarResponsablesProceso( java.lang.String dbpool,java.lang.String proceso,java.lang.String uorgan )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void eliminarResponsablesProceso( java.lang.String[] params,java.util.ArrayList lista )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void registrarResponsable( java.lang.String dbpool,java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public boolean registrarResponsableMasivo( java.lang.String dbpool,java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void asignacionResponsablesMasivo( java.lang.String dbpool,java.util.HashMap params )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarAprobadores( java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void registrarAprobador( java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarParametros( java.lang.String dbpool,java.lang.String codTab )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.HashMap buscarDelegados( java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void registrarDelegados( java.util.ArrayList procesos,java.util.HashMap datos,java.util.HashMap delegOrig,java.util.HashMap delegNuevo )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarUOsinAprob( java.lang.String dbpool,java.lang.String criterio,java.lang.String valor,java.util.HashMap seguridad )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public boolean cambiarAprobador( java.lang.String dbpool,java.lang.String tipo,java.lang.String txtUO,java.lang.String txtOri,java.lang.String txtDes,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarSupervisores( java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void eliminarSupervisores( java.lang.String dbpool,java.lang.String[] params,java.util.ArrayList lista )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void registrarSupervisor( java.lang.String dbpool,java.lang.String codMov,java.lang.String UO,java.lang.String superv,java.lang.String fechaInicio,java.lang.String fechaFin,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void modificarSupervisor( java.lang.String dbpool,java.util.HashMap superv,java.lang.String fechaInicio,java.lang.String fechaFin,java.lang.String estado,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarTipoMovimientosPerfil( java.lang.String dbpool,java.lang.String tipo,java.lang.String estado,java.lang.String fIni,java.lang.String fFin,java.util.HashMap seguridad )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Realiza la busqueda de los datos de un tipo de Movimiento
    * @param dbpool String
    * @param tipoMov String
    * @return Map
    * @throws RemoteException    */
   public java.util.Map cargarFindByMov( java.lang.String dbpool,java.lang.String tipoMov )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.Map validarSolicitud( java.lang.String dbpool,java.lang.String tipo )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public boolean validarLicencia( java.lang.String dbpool,java.lang.String tipo,java.lang.String valor )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarTipoMovimientosFormativasPerfil( java.lang.String dbpool,java.lang.String tipo,java.lang.String estado,java.lang.String fIni,java.lang.String fFin,java.util.HashMap seguridad )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarMovimientosActivosInactivos( java.lang.String dbpool )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarCategorias( java.lang.String dbpool )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarCategoriasOrdenadasByDescrip( java.lang.String dbpool )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo encargado de realizar la eliminacion de categorias y sus movimientos relacionados
    * @param params
    * @param listaCategorias
    * @throws RemoteException    */
   public void eliminarCategorias( java.lang.String[] params,java.util.ArrayList listaCategorias )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarMovAsignados( java.lang.String codCategoria )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarMovAsignadosAllCategorias(  )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarMovPorAsignar( java.util.ArrayList listaMovAsignados,java.util.ArrayList listaAllMovT1279Activos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.lang.String devolverNuevoCodigoCategoria( java.lang.String dbpool )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.Map buscarCategoria( java.lang.String dbpool,java.lang.String codCategoria )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Registra y/o actualiza la categoria y sus movimientos
    * @param datos HashMap
    * @throws RemoteException    */
   public void registrarCategoria( java.lang.String dbpool,java.util.HashMap datos )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   public java.util.ArrayList buscarCategoriasByMovimiento( java.lang.String dbpool,java.lang.String codMovimiento )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList findMovimientosFlujosAprobadores( java.lang.String dbpool,java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList obtenerPendientesxAprobador( java.lang.String dbpool,java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo encargado de eliminar un flujo de aprobaci�n (tupla)
    * @param params
    * @param listaCategorias
    * @throws RemoteException    */
   public boolean insertAprobadorFlujo( java.lang.String dbpool,java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo encargado de eliminar un flujo de aprobaci�n (tupla)
    * @param params
    * @param listaCategorias
    * @throws RemoteException    */
   public boolean deleteAprobadorFlujo( java.lang.String dbpool,java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo encargado de eliminar un flujo de aprobaci�n (tupla)
    * @param params
    * @param listaCategorias
    * @throws RemoteException    */
   public boolean deleteAprobadorFlujo4UniOrgYMov( java.lang.String dbpool,java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo encargado de eliminar un flujo de aprobaci�n (tupla)
    * @param params
    * @param listaCategorias
    * @throws RemoteException    */
   public int transferirSegPendientes( java.lang.String dbpool,java.lang.String uorgan,java.lang.String numMov,java.lang.String viejoAprob,java.lang.String nuevoAprob,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo encargado del registro masivo del flujo de aprobadores
    * @param dbean DynaBean
    * @throws IncompleteConversationalState
    * @throws RemoteException
    * @since 22/04/2014    */
   public void registroFlujoAprobadoresMasivo( pe.gob.sunat.framework.core.pattern.DynaBean dbean )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList registrarFlujosAprobadores( java.lang.String dbpool,java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public void asignarPeriodos( java.util.Map params,java.util.ArrayList listaPeriodos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

}
