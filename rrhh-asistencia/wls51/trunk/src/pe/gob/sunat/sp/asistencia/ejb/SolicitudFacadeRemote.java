/*
 * Generated by XDoclet - Do not edit!
 */
package pe.gob.sunat.sp.asistencia.ejb;

/**
 * Remote interface for SolicitudFacadeEJB.
 * @xdoclet-generado el 03-02-2020
 */
public interface SolicitudFacadeRemote
   extends javax.ejb.EJBObject
{

   public java.util.ArrayList verificarSolicitud( java.lang.String dbpool,java.util.HashMap mapa,java.lang.String tipo,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * WERR-PAS20155E230300132
    * @throws SQLException
    */
   public boolean inicioLicenciaHabil( java.lang.String dbpool,java.lang.String fechaAlta,java.lang.String fechaNac )
      throws java.rmi.RemoteException;

   public java.util.ArrayList validaLicencia( java.util.HashMap mapa,java.util.HashMap tipoMov,boolean validaRango )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList validaMarcaciones( java.util.HashMap mapa,java.util.HashMap tipoMov )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList registrarMarcacion( java.util.HashMap mapa,java.util.HashMap tipoMov )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList anularMarcacion( java.util.HashMap mapa,java.util.HashMap tipoMov )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList validaVentaVacaciones( java.lang.String dbpool,java.lang.String codPers,java.lang.String anno,java.lang.String dias,java.lang.String tipo )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList registraSolicitud( java.util.HashMap mapa,java.lang.String tipo,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList procesarSolicitud( java.lang.String dbpool,java.util.HashMap solicitud,java.util.HashMap mapa,java.util.HashMap aprobador,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList procesarSolicitudAdministracion( java.lang.String dbpool,java.util.HashMap solicitud,java.util.HashMap mapa,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo encargado de rechazar las solicitudes
    * @param parametros
    * @return List
    * @throws FacadeException
    */
   public java.util.List rechazarSolicitud( java.util.Map parametros )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   public java.util.ArrayList derivarRRHHSolicitud( java.lang.String dbpool,java.util.HashMap solicitud,java.util.HashMap mapa,java.util.HashMap aprobador,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo encargado de verificar la Aprobaci√≥n de solicitud
    * @param dbpool, solicitud, mapa, aprobador, usuario
    * @return ArrayList
    * @throws RemoteException
    */
   public java.util.ArrayList verificarAprobarSolicitud( java.lang.String dbpool,java.util.HashMap solicitud,java.util.HashMap mapa,java.util.HashMap aprobador,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo encargado de aprobar la solicitud
    * @param parametros
    * @return List
    * @throws FacadeException
    */
   public java.util.List aprobarSolicitud( java.util.Map parametros )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   public java.util.ArrayList registrarSeguimiento( java.lang.String dbpool,java.util.HashMap solicitud,java.util.HashMap mapa,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList modificarSeguimientoAdministracion( java.lang.String dbpool,java.util.HashMap solicitud,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList registrarLicencia( java.lang.String dbpool,java.util.HashMap solicitud,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarSolicitudesConcluidas( java.lang.String dbpool,java.lang.String codPers,java.lang.String tipo,java.lang.String criterio,java.lang.String valor,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarSolicitudesIniciadas( java.lang.String dbpool,java.lang.String codPers,java.lang.String tipo,java.lang.String criterio,java.lang.String valor,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarConsultaGeneral( java.util.HashMap datos,java.util.HashMap seguridad )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarSolicitudesRecibidas( java.lang.String dbpool,java.lang.String codPers,java.lang.String tipo,java.lang.String criterio,java.lang.String valor )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarVacProgramadas( java.lang.String dbpool,java.lang.String codPers,java.lang.String anno )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarVacSolicitadasRep( java.lang.String dbpool,java.lang.String codPers,java.lang.String numero,java.lang.String anno )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.HashMap cargarSolicitud( java.lang.String dbpool,java.lang.String codPers,java.lang.String anno,java.lang.String numero )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.HashMap obtenerAprobador( java.lang.String dbpool,java.util.HashMap solicitud )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList cargarSeguimientos( java.lang.String dbpool,java.lang.String codPers,java.lang.String anno,java.lang.String numero )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList validaVacacionesEfectivas( java.lang.String dbpool,java.lang.String codPers,java.lang.String fechaIni,java.lang.String fechaFin,int dias,java.lang.String anno )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList validaVacacionesEfectivasAdelanto( java.lang.String dbpool,java.lang.String codPers,java.lang.String fechaIni,java.lang.String fechaFin,int dias,java.lang.String anno,java.lang.String esAdelanto )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList validaReprogramacion( java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList validaPostergacion( java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList registrarVacacionEfectiva( java.lang.String dbpool,java.lang.String codPers,java.sql.Timestamp fechaIni,java.sql.Timestamp fechaFin,java.lang.String dias,java.lang.String observacion,java.lang.String usuario,java.lang.String annoRef,java.lang.String areaRef,java.lang.String numeroRef,java.lang.String anno )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList suspenderVacacion( java.lang.String dbpool,java.lang.String numero,java.lang.String codPers,java.lang.String periodo,java.lang.String licencia,java.sql.Timestamp fechaIni,java.lang.String annoRef,java.lang.String areaRef,java.lang.String numeroRef,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.List convertirAVacacionEfectiva( java.lang.String dbpool,java.lang.String numero,java.lang.String codPers,java.lang.String periodo,java.sql.Timestamp fechaIni,java.lang.String annoRef,java.lang.String areaRef,java.lang.String numeroRef,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.List convertirAVacacionEfectivaAdelanto( java.lang.String dbpool,java.lang.String numero,java.lang.String codPers,java.lang.String periodo,java.sql.Timestamp fechaIni,java.lang.String annoRef,java.lang.String areaRef,java.lang.String numeroRef,java.lang.String esAdelanto,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.List convertirAVacacionEfectivaMatrimonio( java.lang.String dbpool,java.util.HashMap solicitud,java.lang.String usuario )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList reprogramarVacacion( java.util.HashMap mapa )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList postergarVacacion( java.util.HashMap mapa )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList actualizaSolicitudReprogramacion( java.lang.String dbpool,java.util.HashMap datos,java.lang.String tipo,java.lang.String estado )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList buscarSupervisores( java.lang.String dbpool,java.lang.String codPers,java.lang.String mov,java.lang.String uorg )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo que se encarga de verificar las Solicitudes Pendientes de Vacaciones que tenga un trabajador
    */
   public java.util.ArrayList verificarSolicitudesPendientesVacaciones( java.util.ArrayList mensajes,java.lang.String dbpool,java.lang.String codPers,int dias,java.lang.String anno )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Mtodo encargado de obtener la programacion
    * @param params Map
    * @return List
    * @throws FacadeException
    */
   public java.util.Map traerVacFisyProg( java.util.Map dBean )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   /**
    * Mtodo encargado de obtener la programacion
    * @param params Map
    * @return List
    * @throws FacadeException
    */
   public java.util.Map agregarReProgramacion( java.util.Map params )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   /**
    * Mtodo encargado de grabar las vacaciones programadas y la anulacion de las vacaciones fisicas
    * @param datos Map
    * @return boolean
    * @throws FacadeException
    */
   public void grabarAnulVacFis( java.util.Map datos )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   /**
    * Metodo encargado de procesar las solicitudes
    * @param param Map
    * @return List
    * @throws IncompleteConversationalState
    * @throws RemoteException
    */
   public java.util.List procesarSolicitudes( java.util.Map param )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   /**
    * Obtiene la labor autorizada
    */
   public java.util.List findHorasLaborAutorizadasConSaldo( java.util.HashMap datos )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   public java.util.ArrayList validaLabor( java.util.HashMap mapa,java.util.HashMap tipoMov )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo encargado de cargar la lista de fechas y horas de solicitudes de labor expcecional
    * @param param Map
    * @return List
    * @throws IncompleteConversationalState
    * @throws RemoteException
    */
   public java.util.List listaSolicitud( java.lang.String dbpool,java.lang.String anno,java.lang.String numero,java.lang.String coduo,java.lang.String codPers,java.lang.String tipo )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   /**
    * Metodo encargado de cargar la lista de fechas y horas de solicitudes de labor expcecional: jquispecoi 02/2014
    * @param param Map
    * @return List
    * @throws IncompleteConversationalState
    * @throws RemoteException
    */
   public java.util.List listaSolicitudAdministracion( java.lang.String dbpool,java.lang.String anno,java.lang.String numero,java.lang.String coduo,java.lang.String codPers,java.lang.String tipo )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   /**
    * Obtiene el saldo de la labor autorizada
    * @throws Exception
    */
   public java.lang.Integer findLaborAutorizadaSaldo( java.util.HashMap datos )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   /**
    * Obtiene la planilla principal activa
    * @throws Exception
    */
   public java.util.Map findPlanillaActiva( java.util.HashMap datos )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   /**
    * Obtiene el estado del flag de cruce con planilla activa
    * @throws Exception
    */
   public java.lang.String findEstadoByCodTabCodigo( java.util.HashMap datos )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   public java.util.ArrayList validaLicenciaCompJefe( java.util.HashMap mapa,java.util.HashMap tipoMov,boolean validaRango )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo para obtener solicitud incluido conceptos
    * @param codPers : Codigo de personal
    * @param anno : aÔøΩo de solicitud
    * @param numero : numero de solicitud
    * @return : datos de la solicitud de reintegro
    * @throws pe.gob.sunat.framework.core.ejb.FacadeException
    * @throws java.rmi.RemoteException
    */
   public java.util.Map obtenerSolicitudReintegro( java.lang.String codPers,java.lang.String anno,java.lang.String numero )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   /**
    * Metodo para obtener solicitud incluido conceptos
    * @param codPers : Codigo de personal
    * @param anno : aÔøΩo de solicitud
    * @param numero : numero de solicitud
    * @return datos de la solicitud de reintegro
    * @throws pe.gob.sunat.framework.core.ejb.FacadeException
    * @throws java.rmi.RemoteException
    */
   public java.util.Map obtenerSolicitudReintegroFinal( java.lang.String codPers,java.lang.String anno,java.lang.String numero,java.lang.String codRel )
      throws pe.gob.sunat.framework.core.ejb.FacadeException, java.rmi.RemoteException;

   /**
    * Metodo para obtener lista con meses para la solicitud de reintegro
    * @param filtro : filtro para la busqueda
    * @return : Periodos (meses y aÔøΩos) validos a reintegro
    * @throws RemoteException
    */
   public java.util.Map obtenerAnioMesesParaSolReintegro( java.util.Map filtro )
      throws java.rmi.RemoteException;

   /**
    * Metodo para obtener lista planillas para la solicitud de reintegro
    * @param filtro : filtro para la busqueda
    * @return : Planillas validas para reintegro
    * @throws RemoteException
    */
   public java.util.Map obtenerPlanillasParaSolReintegro( java.util.Map filtro )
      throws java.rmi.RemoteException;

   /**
    * Funcion para la busqueda de conceptos de solicitud de reintegro - asistencia(desde base planilla)
    * @param pool_sig : pool siga
    * @param pool_sp_c : pool sp
    * @param filtro : filtro de busqueda ->tipo_plan_tpl,codi_empl_per,anio,mes
    * @return Lista de conceptos de asistencia/licencias
    * @throws IncompleteConversationalState
    * @throws RemoteException
    */
   public java.util.List buscarConceptosAsistencia( java.lang.String pool_sig,java.lang.String pool_sp_c,java.util.Map filtro )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Funcion para la busqueda de conceptos para solicitud de reintegro - licencias , permisos y subsidios (desde base planilla)
    * @param pool_sig : pool siga
    * @param pool_sp_c : pool sp
    * @param filtro : filtro de busqueda ->tipo_plan_tpl,codi_empl_per,anio,mes
    * @return Lista de conceptos de asistencia/licencias
    * @throws IncompleteConversationalState
    * @throws RemoteException
    */
   public java.util.List buscarConceptosSubsidios( java.lang.String pool_sig,java.lang.String pool_sp_c,java.util.Map filtro )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo para btener fechas con movimientos
    * @param filtro : parametros de busqueda
    * @return lista de fechas donde el trabajador tiene movimientos
    * @throws IncompleteConversationalState
    * @throws RemoteException
    */
   public java.util.List buscarFechasConMovimientos( java.util.Map filtro )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo para buscar los detalles de asistencia por movimiento
    * @param pool_sig : pool de base de datos
    * @param pool_sp_c : pool de base de datos
    * @param filtro : parametro de busqueda -> tipo_plan_tpl , codi_empl_per,anio, mes, movi , tipo solicitud
    * @return Lista de detalles de concepto de asistencia
    * @throws IncompleteConversationalState
    * @throws RemoteException
    */
   public java.util.List buscarDetalleConceptoAsistencia( java.lang.String pool_sig,java.lang.String pool_sp_c,java.util.Map filtro )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo para buscar los detalles de licencias por movimiento
    * @param pool_sig : pool de base de datos
    * @param pool_sp_c : pool de base de datos
    * @param filtro : parametro de busqueda -> tipo_plan_tpl , codi_empl_per,anio, mes, movi , tipo solicitud
    * @return Lista de detalles de concepto licencia
    * @throws IncompleteConversationalState
    * @throws RemoteException
    */
   public java.util.List buscarDetalleConceptoLicencia( java.lang.String pool_sig,java.lang.String pool_sp_c,java.util.Map filtro )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Metodo para registro de solicitud de reintegro
    * @param anio
    * @param numero
    * @param mapa : bean con datos de la solicitud , archivo
    * @param usuario
    * @return 
    * @throws SQLException
    */
   public java.util.ArrayList registrarSolReintegro( java.lang.String anio,java.lang.Integer numero,java.util.HashMap mapa )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * Funcion para excluir de concepto por parte de jefe
    * @param dbpool pool de conexion
    * @param mapa datos de concepto
    * @return mensajes de error
    */
   public java.util.ArrayList marcarExcluirConcepto( java.lang.String dbpool,java.util.HashMap mapa )
      throws java.rmi.RemoteException;

   /**
    * Metodo para actualizar el concepto , llamado desde la aprobacion de rrhhh con la cantidad a devolver y el tipo de devolucion
    * @param mapa datos de conceptos
    * @return lista de mensajes de error
    */
   public java.util.List procesarDetalleConcSolReintegro( java.util.HashMap mapa )
      throws java.rmi.RemoteException;

   /**
    * Metodo para verificar el cese de trabajador
    * @param usuario
    * @return true/false
    */
   public boolean esTrabajadorCesado( java.lang.String usuario )
      throws java.rmi.RemoteException;

   /**
    * Metodo para enviar Notificacion de no reintegro al trabajador
    * @param mapa : datos de la solicitud
    * @return Lista mensajes de error
    * @throws java.rmi.RemoteException
    */
   public java.util.List enviarMensajeNotificacion( java.util.Map mapa )
      throws pe.gob.sunat.sol.IncompleteConversationalState, java.rmi.RemoteException;

   /**
    * PAS20171U230200001 - solicitud de reintegro Metodo para obtener lista de documentos aprobados
    * @param filtro : datos para la busqueda
    * @return Mapa con listas de documentos aprobados (papeletas , licencias/vacaciones , solicitudes o solicitudes de subsidio)
    * @throws RemoteException
    */
   public java.util.Map listaDocumentosAprobados( java.util.HashMap filtro )
      throws java.rmi.RemoteException;

   /**
    * Metodo para obtener datos sobre personal incluye tipo de regimen y tipo de planilla
    * @param dbpool :pool de conexion
    * @param codPers : codigo del trabajador
    * @return 
    */
   public java.util.Map obtenerDataTrabajador( java.lang.String dbpool,java.lang.String codPers )
      throws java.rmi.RemoteException;

   /**
    * Metodo para obtener tipos de devolucion (asistencia)
    * @param dbpool : pool de conexion
    * @return Lista de tipos de devolucion asistencia
    */
   public java.util.List obtenerTiposDevolucion( java.lang.String dbpool )
      throws java.rmi.RemoteException;

   /**
    * Metodo para obtener tipos de devolucion (licencias)
    * @param dbpool:pool de conexion
    * @return Lista de tipos de devolucion licencias,permisos
    */
   public java.util.List obtenerTiposDevolucionLicencias( java.lang.String dbpool )
      throws java.rmi.RemoteException;

   /**
    * Metodo para obtener tipos de devolucion (subsidio)
    * @param dbpool : pool de conexion
    * @return Lista de tipos de devolucion licencias,permisos
    */
   public java.util.List obtenerTiposDevolucionSubsudios( java.lang.String dbpool )
      throws java.rmi.RemoteException;

   /**
    * Metodo para verificar que el regimen laboral de la planilla consultada coincida con el regimen de empleado actual
    * @param dbpool :pool de conexion
    * @return true/false
    * @throws java.rmi.RemoteException
    */
   public boolean verificarRegimenLaboral( java.util.Map filtro )
      throws java.rmi.RemoteException;

   /**
    * Metodo para verifica reingreso de trabajador Valida si la planilla es de una fecha posterior al ingreso
    * @param filtro :parametros de busqueda
    * @return true/false
    * @throws java.rmi.RemoteException
    */
   public boolean verificarReIngreso( java.util.Map filtro )
      throws java.rmi.RemoteException;

   /**
    * Metodo para Verificar que el trabajador esta presente en planilla cas o haberes principal solicitado
    * @param filtro :parametros de busqueda
    * @return true/false
    * @throws java.rmi.RemoteException
    */
   public boolean verificarExistePlanilla( java.util.Map filtro )
      throws java.rmi.RemoteException;

   /**
    * Metodo para Verificar que el regimen del trabajador este configurado
    * @param filtro :parametros de busqueda
    * @return true/false
    * @throws java.rmi.RemoteException
    */
   public boolean verificarRegimenConfigurado( java.util.Map filtro )
      throws java.rmi.RemoteException;

   /**
    * Metodo para carga el detalle de solicitudes de reintegro
    * @param concepto : datos de concepto
    * @return : lista de detalles
    * @throws java.rmi.RemoteException
    */
   public java.util.List cargarDetSolReintegro( java.util.Map concepto )
      throws java.rmi.RemoteException;

   /**
    * Metodo para actualizar el detalle de solicitudes de reintegro
    * @param concepto : datos de concepto
    * @return : lista de detalles
    * @throws java.rmi.RemoteException
    */
   public boolean actualizarDetSolReintegro( java.util.Map concepto )
      throws java.rmi.RemoteException;

   /**
    * Carga planilla devolucion
    * @param params datos de busqueda
    * @return : datos de planilla
    * @throws java.rmi.RemoteException
    */
   public java.util.Map obtenerPlanillaDevolucion( java.util.Map params )
      throws java.rmi.RemoteException;

   /**
    * Obtener los datos de la devolucion ya realizadas (en tablas de devolucion) y los carga a la lista de solicitudes de devolucion
    * @param sol
    * @return : Lista de devoluciones
    */
   public java.util.List obtenerDevoluciones( java.util.Map solicitud,java.util.Map concepto,java.util.List listDevol )
      throws java.rmi.RemoteException;

   /**
    * Funcion para obtener el monto unitario
    * @param concepto datos del concepto
    * @return monto unitario
    */
   public java.math.BigDecimal obtenerMontoUnitario( java.util.Map solicitud,java.util.Map concepto )
      throws java.rmi.RemoteException;

   /**
    * Metodo para obtener datos adicionales de solicitud de licencia por enfermedad
    */
   public java.util.Map obtenerDatosSolLicenciaEnfermedad( java.lang.String codPers,java.lang.String anno,java.lang.String numero )
      throws java.rmi.RemoteException;

}
